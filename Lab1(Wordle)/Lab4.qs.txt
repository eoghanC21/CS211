import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    private static long res = 0;
    private static long count = 0;
    private static long[] numar;
    public static void main(String args[] ) throws Exception {
        //
        Scanner sc = new Scanner(System.in);
        long a = sc.nextLong();
        long b = sc.nextLong();
        long c = sc.nextLong() - 1;
        numar = new long[(int) ((b - a) + 1)];
        long p = 0;
        for (long i = a; i <= b; i++) {
            numar[(int) p] = i;
            p++;
        }
        quicksort(numar, 0, numar.length-1);
        /*for(long i = 0; i < numar.length; i++){
            System.out.print(numar[(int)i] + " ");
        }*/
        /*
        if (CLC(numar[(int) c - 1]) == CLC(numar[(int) c])) {
            if (numar[(int) c - 1] > numar[(int) c]) {
                // swapthem in the numar and clar
                long temp = numar[(int) (c - 1)];
                numar[(int) c - 1] = numar[(int) c];
                numar[(int) c] = temp;
            }
        }
        if (CLC(numar[(int) c]) == CLC(numar[(int) c + 1])) {
            if (numar[(int) c] > numar[(int) c + 1]) {
                // swapthem in the numar and clar
                long temp = numar[(int) c];
                numar[(int) c] = numar[(int) c + 1];
                numar[(int) c + 1] = temp;
            }
        }
        */
        numar = eqSort(numar);
        System.out.println(numar[(int)c]);
    }
    
    private static void quicksort(long[] array, long start, long end) {
        if (end <= start) { // base case
            return;
        }
        long pivot = partition(array, start, end);
        quicksort(array, start, pivot - 1);
        quicksort(array, pivot + 1, end);

    }

    private static long partition(long[] array, long start, long end) {
        long pivot = array[(int)end];
        long pivotCL = CLC(pivot);
        long i = start - 1;
        for (long j = start; j <= end - 1; j++) {
            if (CLC(array[(int)j]) < pivotCL) {
                i++;
                long temp = array[(int)i];
                array[(int)i] = array[(int)j];
                array[(int)j] = temp;
            }
        }
        i++;
        long temp = array[(int)i];
        array[(int)i] = array[(int)end];
        array[(int)end] = temp;
        return i; // i = location of pivot
    }
    
    private static long CLC(long n) {
        if (n == 1) { // base case
            // count++;
            res = count;
            count = 0;
            // System.out.println("Base case");
            return res;
        } else if (n % 2 == 0) {
            count++;
            // System.out.println("Even");
            return CLC(n / 2);
        } else // if(n % 2 != 2)
            count++;
        // System.out.println("Odd");
        return CLC((n * 3) + 1);
    }
    
    private static long[] eqSort(long[] array){
        for(int i = 0; i < array.length-1; i++){
            if(CLC(array[i]) == CLC(array[i+1])){
                if(array[i] > array[i+1]){
                    long temp = array[1];
                    array[1] = array[2];
                    array[2] = temp;
                }
            }
        }
        return array;
    }
}